[
    {
        "category": 1,
        "title": "S盒是什么",
        "content": "S盒是一个4*16的矩阵, 其中矩阵的行对应输入的第一位和最后一位, 列对应输入的中间四位, 所以当输入一个6位的比特串时, 就可以知道对应这个矩阵的几行几列, 然后就可以得到唯一一个对应的四位比特串",
        "times": 0
    },
    {
        "category": 1,
        "title": "密钥编排的过程",
        "content": "将56位的密钥通过PC1变换分为了左右两个28位的部分, 分别是C_0和D_0。然后根据移位次数表, 按照上面轮函数迭代的次数分别进行左循环移位一位或者两位, 然后再经过PC2置换得到最后要求的48位的子密钥",
        "times": 0
    },
    {
        "category": 1,
        "title": "分组密码算法的运行模式有哪些",
        "content": "2. 有ECB(Electronic CodeBook mode), CBC(Cipher Block Chainning mode), CFB(Cipher Feedback mode), OFB(output feedback mode), CTR(CounTer mode)\n3. ECB：最简单的运行模式, 将明文分成若干个64bit的明文块, 每次用相同的密钥去加密。密文块可以分别独立解密, 无顺序要求。这种模式容易受到明文模式攻击和主动攻击\n4. CBC模式：使用初始向量和第一个分组异或, 然后加密, 之后的分组在加密之前都要和前一个分组的密文异或。这种模式可以防止明文模式攻击, 但是不提供完整性保护, 攻击者可以在传输过程中修改密文\n5. CFB模式：将明文分成若干个64比特的分组。取一个64比特的移位寄存器, 初值为一个随机的初始向量。首先对一个64比特的初始向量进行加密, 得到64比特的密钥流, 和明文的第一组进行异或, 产生密文的第一组, 然后将再次对刚刚得到的密文进行加密, 再和下一组明文异或, 这样不断进行下去, 得到的每个单元的密文进行组合就得到了最终的密文。CFB模式对传输错误非常敏感, 所以应该有完整性保护。\n6. CTR模式：将明文分组, 每组64bit。有一个随机向量和计数器, 分别为32bit, 两个合在一起得到64bit的随机向量。首先将随机向量通过密钥进行加密, 然后和第一组明文异或得到第一组密文。之后随机向量通过计数器加1, 再通过密钥加密, 然后和第二个分组得到第二组密文, 依次得到所有密文。",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是OTP",
        "content": "OTP是一次性密码, 是一种只能使用一次的密码, 随机密钥长度大于或等于明文长度具有完善保密性",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是流密码",
        "content": "流密码是一种重要的密码体制, 不同于分组密码将明文分成若干组去分别加密, 流密码将明文消息按照字符或者比特逐位的进行加密, 主要是使用高随机的密钥流去进行加密, 大多是通过硬件实现的。",
        "times": 0
    },
    {
        "category": 1,
        "title": " 密码学中，随机数有什么应用场景",
        "content": "1. 生成密钥, 用于对称密码和消息认证码\n2. 生成密钥对：用于公钥密码和数字签名\n3. 生成初始化向量, 用于CBC, CFB, OFB模式\n4. 生成随机数, 用于CTR模式\n5. 生成盐, 用于基于口令的密码",
        "times": 0
    },
    {
        "category": 1,
        "title": "同步流密码和自同步流密码是什么",
        "content": "1. 同步流密码是一种每个比特都依赖于相应密钥比特的密码系统, 需要在加密和解密时使用完全相同的密钥流\n2. 自同步流密码是密钥流不需要完全同步的密码系统, 在自同步流密码中, 密钥流的生成不仅依赖于密钥本身, 还依赖于先前的密文比特。\n3. 一般在可靠信道传输时使用同步流密码, 不可靠信道传输时使用自同步流密码\n4. CFB属于自同步流密码, CTR属于同步流密码",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是LFSR",
        "content": "LFSR是线性反馈移位寄存器, 由n位的移位寄存器和反馈函数组成的, 其中反馈函数是线性函数。当移位寄存器右移时, 最后一个存储单元的值输出, 第一个存储单元由反馈函数的输出值填充, 其中反馈函数通常是若干存储单元的异或得到",
        "times": 0
    },
    {
        "category": 1,
        "title": "LFSR中，什么是m序列呢",
        "content": "m序列是一种特殊的由LFSR生成的伪随机比特序列, 他的周期是2的n次减1, 也就是一个n级的LFSR的最大周期。他的反馈函数是一个特定的多项式函数, 也即本源多项式",
        "times": 0
    },
    {
        "category": 1,
        "title": "知道n级LFSR的密钥序列，如何计算反馈函数",
        "content": "取前2n个密钥序列, 然后建立矩阵方程, 即前n个密钥序列矩阵和反馈函数矩阵的矩阵乘的成绩应该为后n个密钥序列矩阵",
        "times": 0
    },
    {
        "category": 1,
        "title": "RC4算法的基本原理",
        "content": "RC4是属于对称密码中的流密码加密算法, 密钥长度可变, 面向字节操作。以一个足够大的S表为基础, 对表进行非线性变化, 产生密钥流。其主要步骤分为, 初始化S表, 密钥流的生成\n初始化S表首先对S表进行线性填充, 一般是256个字节, 然后用种子密钥填充另一个256字节的K表, 之后用K表对S表进行初始置换, 就得到了S表。\n密钥流的生成就是通过密钥调度算法对S表进行各种变换, 最后得到了一个伪随机数序列, 就是作为密钥流。\n最后用这个密钥流和明文进行异或就得到了密文",
        "times": 0
    },
    {
        "category": 1,
        "title": "哈希函数的性质",
        "content": "1. 确定性：它可以根据任意长度的消息计算出固定长度的散列值\n2. 抗修改性：输入的轻微的改变也会导致输出的哈希值发生巨大的变化\n3. 抗碰撞性, 对于两个不同的输出, 发生哈希值相等的情况的概率很小\n4. 唯一性, 消息不同, 散列值也不同\n5. 单向性, 只能从消息计算得到散列值, 而不能从散列值反推得到消息",
        "times": 0
    },
    {
        "category": 1,
        "title": "哈希函数可以用来干什么",
        "content": "1. 用于基于口令的加密\n2. 用于构造消息认证码\n3. 用于进行数字签名\n4. 用于构造伪随机数生成器\n5. 用于构造一次性口令",
        "times": 0
    },
    {
        "category": 1,
        "title": "举出几种哈希函数算法",
        "content": "MD4, MD5, SHA系列算法",
        "times": 0
    },
    {
        "category": 1,
        "title": "举出对哈希函数的攻击方式",
        "content": "暴力破解, 生日攻击",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是生日攻击",
        "content": "生日攻击是利用生日悖论进行的攻击, 攻击者可以生成多个输入, 然后用哈希函数进行处理, 然后查看是否具有相同的输出, 也就是是否发生了哈希碰撞。这样就可以在不改变哈希值的基础上对信息进行修改",
        "times": 0
    },
    {
        "category": 1,
        "title": "介绍一下SHA-256算法的具体步骤",
        "content": "1. 对消息进行补位处理, 使得最终的长度是512位的倍数\n2. 以512位为单位将消息分成若干块, 拆成16个32比特的消息, 然后通过循环右移和异或扩充为64个32比特的消息\n3. 用初始的8个哈希值对每一个512位的消息块进行加密, 得到新的8个哈希值, 这样循环下去, 当每一块都通过加密之后, 得到的就是最终的哈希值",
        "times": 0
    },
    {
        "category": 1,
        "title": "散列函数和消息认证码之间的区别",
        "content": "1. 哈希函数是通过对输入的数据进行加密, 转化为固定长度的输出数据, 用来验证消息的完整性, 一致性\n2. 消息认证码通过输入数据和共享密钥的加密来对消息的完整性和真实性进行验证。\n3. 哈希函数主要用于数据完整性验证方面\n4. 消息认证码主要用于身份验证",
        "times": 0
    },
    {
        "category": 1,
        "title": "可以通过什么方法来实现消息认证码",
        "content": "1. 使用SHA-2之类的哈希函数实现消息认证码\n2. 使用AES之类的对称加密算法来实现消息认证码, 使用CBC模式, 将前面生成的密文全部抛弃, 只留下最后一部分的密文作为MAC值",
        "times": 0
    },
    {
        "category": 1,
        "title": "消息认证码的攻击目的是什么",
        "content": "1. 密钥恢复攻击, 用来找到用户的密钥\n2. 伪造攻击, 用来在未知密钥的情况下伪造未经认证的消息和认证码",
        "times": 0
    },
    {
        "category": 1,
        "title": "HMAC计算MAC值的步骤",
        "content": "1. 首先将密钥填充为一个哈希函数的分组的长度\n2. 然后将填充后的密钥和ipad的比特序列进行异或运算, ipad是一个特定的比特序列\n3. 然后将运算后的值和消息进行组合, 放在消息的开头\n4. 将组合后的值输入到哈希函数, 计算出哈希值\n5. 将上面填充后的密钥和opad的比特序列进行异或运算, 然后后面拼上上一步得到的哈希值\n6. 将最后得到的这个哈希值再次输入到哈希函数中, 计算得到最终的哈希值, 也就是MAC值",
        "times": 0
    },
    {
        "category": 1,
        "title": "请介绍一下RSA加密算法的基本加密步骤",
        "content": "1. 首先取两个不相等且足够大的质数p和q\n2. 然后计算p和q的乘积n\n3. 之后计算n的欧拉函数$\\phi n$。\n4. 取一个和$\\phi n$互质的整数e\n5. 求出e对于$\\phi n$的模反元素d\n6. 然后公钥就是e和n的组合\n7. 私钥就是d和n的组合\n8. 加密时明文的e次方 mod n便是密文\n9. 解密时密文的d次方 mod n便是明文",
        "times": 0
    },
    {
        "category": 1,
        "title": "请说几种公钥加密的攻击方式",
        "content": "1. 中间人攻击\n2. 选择密文攻击",
        "times": 0
    },
    {
        "category": 1,
        "title": "介绍几种公钥密码",
        "content": "1. RSA\n2. Rabin\n3. 椭圆曲线密码",
        "times": 0
    },
    {
        "category": 1,
        "title": "相比于公钥密码，对称加密密码有什么缺陷呢",
        "content": "1. 当用对称加密算法加密后, 必须要将密钥告知接收方, 而在传输密钥的过程中, 可能会有风险\n2. 当在一个多人网络中需要两两用户安全通信时, 如果采用对称加密, 那么密钥的数量将会很多\n3. A收到B的文档时, 无法证明这个文档确实来自B",
        "times": 0
    },
    {
        "category": 1,
        "title": "说明用公钥加密传输数据的过程",
        "content": "比如Bob想要给Alice发送一个消息, 然后他让Alice生成一段公钥和私钥, 私钥由Alice自己保存, 公钥发送给Bob, Bob用公钥加密他要准备发送的消息, 然后将密文发给Alice, Alice收到密文之后用私钥就可以解锁密文得到明文",
        "times": 0
    },
    {
        "category": 1,
        "title": "数字签名的算法有哪些",
        "content": "1. RSA算法\n2. DSA算法\n3. 椭圆曲线数字签名",
        "times": 0
    },
    {
        "category": 1,
        "title": "介绍一下秘钥分发的步骤",
        "content": "这里介绍一下NS密钥分发协议的步骤\n1. 首先, A向KDC发送请求, 要求和B通信, 同时发送一个随机数\n2. KDC向A发送会话密钥, B的ID, 之前A向KDC发送的随机数和一个证书的加密信息, 用A和KDC的共享密钥加密。那个证书是用B和C的共享密钥加密后的会话密钥和A的ID\n3. A解密信息, 然后向B转交证书\n4. B解密证书, 并且向A发送一个用会话密钥加密后的随机数\n5. A相应B的请求, 并且将随机数减一, 用会话密钥加密后再发送回B",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是数字证书",
        "content": "数字证书是一种工具, 用来证明自己的身份和数据的真实性。数字证书中包含了一个人或组织的公钥及其相关信息, 包括证书名称, 过期日期等, 由可信任的第三方机构签名为凭证, 通常用于网站认证, 电子邮件加密和安全连接等。",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是PKI",
        "content": "PKI是生成、管理、存储、分发和吊销基于公钥密码学的公钥证书所需要的硬件、软件、人员策略和规程的总和",
        "times": 0
    },
    {
        "category": 3,
        "title": "简述数据库的三级模式和两级映射",
        "content": "三级模式有\n1. 外模式：用户看到的局部数据视图\n2. 概念模式：整个数据库的逻辑结构, 定义了所有数据实体, 他们之间的关系和数据的约束\n3. 内模式：数据库在存储介质上的表示\n两级映射\n1. 内映射：概念模式和内模式之间的映射关系\n2. 外映射：外模式和概念模式之间的关系",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是数据，什么是数据库",
        "content": "数据就是能被记录, 存储和处理的信息, 可以是文字, 数字, 图像等。\n数据库是一个组织数据的集合, 数据库中的数据按照一定的数据模型组织描述和存储, 还提供了一些完整性和安全性的功能, 可以供各个用户共享。",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是数据库管理系统，有什么功能",
        "content": "数据库管理系统是一种软件系统, 位于用户和操作系统之间, 用来创建维护和管理数据库, 主要功能有如下：\n1. 数据定义\n2. 数据组织, 存储和管理\n3. 数据操纵\n4. 数据库的事务管理和运行管理\n5. 数据库的建立和维护",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是数据库系统，它有哪些特点",
        "content": "数据库系统是由数据库, 数据库管理系统和应用程序组成的系统, 有如下的几个特点\n1. 数据共享, 多个应用程序可以共享同一数据库\n2. 数据独立性\n3. 数据一致性\n4. 数据安全性\n5. 数据可靠性\n6. 数据可管理性",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是数据模型，如何分类，有哪些组成要素",
        "content": "数据模型是描述现实世界中各种现象和实体之间关系的一种抽象表示方法, 可以帮助人们描述实际问题中的数据, 并转换为计算机可以处理的形式\n数据模型的分类主要有：\n1. 层次结构数据模型\n2. 网状数据模型\n3. 关系数据模型\n现在我们最常使用的就是关系数据模型\n不同数据模型有不同的组成要素, 但通常由以下的组成要素\n1. 数据结构\n2. 数据操作\n3. 完整性约束",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是关系数据模型和关系数据库，关系数据语言分为哪几类",
        "content": "关系数据模型是目前最常用的一种数据模型, 是用关系表格的形式来表示数据。\n关系数据库是基于关系数据模型构建的数据库, 也是现代企业最常用的数据库模型之一。目前主流的关系数据库有oracle mysql, sql server等\n关系数据语言主要分为数据定义语言和数据操作语言",
        "times": 0
    },
    {
        "category": 3,
        "title": "关系模型的数据结构有哪些",
        "content": "1. 关系\n2. 元组\n3. 属性\n4. 码\n5. 域\n6. 分量\n7. 关系模式",
        "times": 0
    },
    {
        "category": 3,
        "title": "关系数据库的操作有哪些",
        "content": "1. 查询, 其中查询操作可以分为选择, 投影, 连接, 除, 并, 差, 交, 笛卡尔积等\n2. 插入\n3. 删除\n4. 修改",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是视图，有什么作用",
        "content": "在关系数据库中, 视图是一种虚拟的表格, 是将原来的多张表格中的数据通过某种方式重新组合而成的, 属于外模式的范畴。\n视图的作用主要有：\n1. 提高数据安全性和隐私性\n2. 简化数据的访问\n3. 保持数据的逻辑独立性\n4. 进行性能优化",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是索引，他有什么作用",
        "content": "在关系数据库中, 索引是一种数据结构, 用来加速数据查询。索引可以将表格中的某些列按照一定的顺序存储到一个索引文件中, 使得查询时可以访问索引文件定位数据。\n索引的作用主要有：\n1. 提高查询效率\n2. 优化数据排序\n3. 改善数据性能\n索引虽然会提高查询效率, 但是创建和维护索引也需要占用一定的资源, 同时在数据库中的数据变化的时候, 也要动态的维护索引。",
        "times": 0
    },
    {
        "category": 3,
        "title": "数据库系统的基本特征有哪些",
        "content": "数据库系统的基本特征有共享性, 独立性和冗余度小",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是第一范式，什么是第二范式，什么是第三范式",
        "content": "1. 第一范式是关系数据库中的基本要求, 他要求数据库中的所有列都是原子性的, 都是不可再分的。\n2. 第二范式要求一个表中所有除了外链之外不是主键的元素都要和主键有依赖关系\n3. 第三范式要求表中每个非主键列都应该要么依赖主键, 要么依赖独立的非主键",
        "times": 0
    },
    {
        "category": 3,
        "title": "SQL的集合处理方式和宿主语言单记录的处理方式之间用什么来协调",
        "content": "用游标来协调",
        "times": 0
    },
    {
        "category": 3,
        "title": "数据库的完整性指的是什么",
        "content": "数据库的完整性指的是数据库的正确性和相容性  ",
        "times": 0
    },
    {
        "category": 3,
        "title": "数据库中三大完整性是什么",
        "content": "数据库中三大完整性包括实体完整性, 参照完整性和用户定义完整性\n1. 实体完整性：要求表中的主键不能为空, 且不能重复\n2. 参照完整性：表和表之间必须参照正确, 也就是外键要么没有, 要么只能有一个\n3. 用户定义完整性：保证每一列都有合适的数据结构和其他的约束",
        "times": 0
    },
    {
        "category": 3,
        "title": "关系代数的五种基本运算是",
        "content": "并, 差, 选择, 投影, 笛卡尔积",
        "times": 0
    },
    {
        "category": 3,
        "title": "规范化数据库设计分为哪些设计阶段",
        "content": "1. 需求分析阶段\n2. 概念结构设计\n3. 逻辑结构设计\n4. 物理结构设计\n5. 数据库实施阶段\n6. 数据库运行和维护阶段",
        "times": 0
    },
    {
        "category": 3,
        "title": "简述事务和事务特性",
        "content": "事务是一些列数据操作的集合, 具有ACID的性质\nA：原子性, 事务不可以再分割\nC：一致性, 数据库在事务执行的前后要保持一致\nI：隔离性, 一个事物在修改之前, 其他事务是不可见的\nD：持久性, 事务提交后, 修改会永远保持在数据库中",
        "times": 0
    },
    {
        "category": 3,
        "title": "数据独立性是什么",
        "content": "数据独立性分为逻辑独立性和物理独立性\n逻辑独立性是指应用程序不依赖数据的逻辑结构, 这样使得数据结构可以改变而不会影响到应用程序的功能\n物理独立性是指应用程序不依赖于数据存储的方式和位置, 这样的话数据的物理存储方式不会影响到应用程序的功能",
        "times": 0
    },
    {
        "category": 3,
        "title": "数据库系统可能会发生哪些故障",
        "content": "1. 事务内部故障：也就是事务本身发生的故障, 比如说运算溢出, 发生死锁等。\n2. 系统故障：是指造成系统停止运转的任何时间, 使得系统要重新启动。\n3. 介质故障：也就是存储器故障, 比如说硬盘被损坏等\n4. 计算机病毒。",
        "times": 0
    },
    {
        "category": 3,
        "title": "数据库恢复有哪些实现技术",
        "content": "1. 数据转储：即将数据放到另一个硬盘作为备份\n2. 登记日志文件：日志文件中保存着对数据库的所有操作, 通过检查日志文件, 可能会发现问题在哪里",
        "times": 0
    },
    {
        "category": 3,
        "title": "数据库并发操作可能会导致哪些数据不一致的问题",
        "content": "1. 丢失修改\n2. 不可重复读\n3. 读脏数据",
        "times": 0
    },
    {
        "category": 3,
        "title": "并发控制的主要技术是什么",
        "content": "并发控制的主要技术有\n1. 锁：通过在数据对象上加锁来实现并发控制, 防止其他事务对其进行修改, 锁包括共享锁和排他锁等\n2. 时间戳排序：是基于时间戳的并发控制技术, 为每一个事务分配一个时间戳, 然后根据时间戳对所有事务进行排序\n3. 乐观并发控制：是一种不加锁的并发控制技术, 多个事务可以同时读取和修改统一数据, 提交时系统检查是否事务之间有冲突, 如果有的话回滚事务。",
        "times": 0
    },
    {
        "category": 3,
        "title": "什么是数据库镜像",
        "content": "数据库镜像是一种数据备份和恢复的技术, 可以将一个数据库的完整副本复制到另一个位置的设备上, 并且定期保持备份更新, 提高了系统的容错性和可用性。",
        "times": 0
    },
    {
        "category": 3,
        "title": "有哪些类型的数据库？可以描述一下它们之间的区别吗？",
        "content": "关系型数据库：以表格的形式存储数据, 并用SQL来查询和操作数据, 是最常见的数据库类型\n非关系型数据库：使用文档, 图形或键值对的形式来存储数据。",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是操作系统",
        "content": "操作系统是控制和管理计算机硬件和软件资源, 对各类作业进行调度的程序集合。是配置在计算机硬件上的第一层软件, 是对硬件系统的扩充",
        "times": 0
    },
    {
        "category": 6,
        "title": "操作系统的作用有哪些",
        "content": "1. 操作系统作为用户和计算机硬件系统之间的接口\n2. 操作系统负责管理计算机系统的资源, 波扩处理机, 内存, 外设, 文件\n3. 操作系统作为扩充机器, 实现对计算机资源的抽象",
        "times": 0
    },
    {
        "category": 6,
        "title": "操作系统有哪些基本特性，简要概述",
        "content": "1. **并发**：在单处理机上, 在一段时间, 宏观上多个程序同时运行, 微观上多个程序交替执行的情形\n2. **共享**：并发执行的多个进程共享系统资源\n3. 虚拟：操作系统通过虚拟技术实现对系统功能的扩充\n4. 异步性：并发执行的进程由于资源的限制会出现走走停停的现象",
        "times": 0
    },
    {
        "category": 6,
        "title": "设置现代计算机的主要目标是什么",
        "content": "1. 使计算机更加方便使用\n2. 使计算机系统的资源利用的更加有效率\n3. 支持多任务和多用户访问\n4. 提高计算机的可靠性, 安全性。",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是微内核技术",
        "content": "微内核技术是一种操作系统的架构, 只提供了一些最基本的机制, 用来实现操作系统所必须的最少量的功能, 数据和特征。具有很强的灵活性, 可扩展性",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是进程，为什么要引入进程",
        "content": "进程是当前正在执行的程序的实例, 是系统分配资源的独立单位。引入进程的目的是为了让操作系统能够管理和分配计算机的资源, 给不同的程序。操作系统可以保持进程之间的隔离和资源分配, 让程序的运行互不打扰。",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是PCB",
        "content": "PCB是进程控制块, 记录了用来描述进程当前的状况, 以及控制进程运行的全部信息。操作系统就是根据PCB来对进程进行控制和管理的, PCB是进程存在的唯一标识。",
        "times": 0
    },
    {
        "category": 6,
        "title": "进程和程序有什么差别",
        "content": "进程是程序的执行, 是动态的, 程序是静态的。进程的存在是暂时的, 程序是永久存在的。进程=程序+数据+PCB。",
        "times": 0
    },
    {
        "category": 6,
        "title": "进程有哪些基本状态",
        "content": "有运行态, 阻塞态和就绪态",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是临界资源，举出一些临界资源的例子",
        "content": "临界资源是在操作系统中, 多个进程或线程共享一些有限的资源, 这些资源在同一时刻只能被同一个进程或线程访问。临界资源的例子有打印机, 文件, 数据库等",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是死锁，有哪些解决死锁的办法",
        "content": "死锁是操作系统中一组进程因为互相持有对方资源, 并等待对方释放自己需要的资源而陷入无限等待的状态\n解决死锁的办法有\n1. 预防死锁：破坏死锁存在的必要条件\n2. 避免死锁：使系统在分配资源的时候不进入不安全状态\n3. 检测和恢复死锁：",
        "times": 0
    },
    {
        "category": 6,
        "title": "有哪些进程通信的方法",
        "content": "进程通信是不同进程相互传递信息或数据, 进程通信有以下常见的方法\n1. 管道\n2. 消息传递\n3. 消息队列\n4. 共享内存",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是线程，为什么要引入线程",
        "content": "线程是操作系统能够运行调度的最小单位, 被包含在进程之中, 是进程的实际运行单位。之所以要引入进程是为了提高系统的并发性, 让多个程序能够并发执行, 提高资源利用率和系统吞吐量。",
        "times": 0
    },
    {
        "category": 6,
        "title": " 进程和线程有什么区别",
        "content": "进程是拥有资源的基本单位, 有自己独立的地址空间。而线程是处理机调度和分配的基本单位, 不拥有系统资源, 可以访问进程的资源。一个进程可以拥有多个线程。",
        "times": 0
    },
    {
        "category": 6,
        "title": "有哪些进程调度算法",
        "content": "进程调度算法是操作系统按照某些策略和算法从就绪态的进程为当前空闲CPU选择要运行的新进程的算法, 具有有以下几个算法\n1. 先来先服务算法\n2. 最短时间有限算法\n3. 优先级调度算法\n4. 时间片轮转\n5. 多级反馈队列",
        "times": 0
    },
    {
        "category": 6,
        "title": "产生死锁的必要条件有哪些",
        "content": "1. 互斥条件\n2. 请求和保持条件\n3. 不剥夺条件\n4. 循环等待条件  ",
        "times": 0
    },
    {
        "category": 6,
        "title": "产生死锁的原因是什么",
        "content": "1. 系统资源不充分\n2. 系统分配资源的次序不当",
        "times": 0
    },
    {
        "category": 6,
        "title": "内存的分配方式有哪些",
        "content": "内存的分配方式主要有连续分配和离散分配\n连续分配包括单一连续分配, 固定分区和动态分区\n离散分配方式包括分页存储管理方式, 分段存储管理方式和段页式",
        "times": 0
    },
    {
        "category": 6,
        "title": "动态分区分配有哪些分配算法",
        "content": "包括首次适应算法, 最佳适应算法, 最坏适应算法等",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是TLB，为什么要引入TLB",
        "content": "TLB是一种高速缓存存储器, 用来存放最近访问的页表项的副本, 引入快表是为什么加速地址变换的速度, 减少访问内存中页表的次数。",
        "times": 0
    },
    {
        "category": 6,
        "title": "如何通过页表实现逻辑地址和物理地址之间的映射",
        "content": "页表中逻辑地址和物理地址的映射是通过页号和偏移量实现的。逻辑地址由页号和页内偏移量组成, 物理地址由页框号和页内偏移量组成, 通过查询页表可以将逻辑地址中的页号转换为页框号, 而页内偏移量不变, 就得到了物理地址",
        "times": 0
    },
    {
        "category": 6,
        "title": "分页和分段存储管理方式有什么区别",
        "content": "1. 段是逻辑单位, 用户可见, 长度可变, 页是物理单位, 用户透明, 长度固定\n2. 分页是为了系统管理的需要, 分段是为了更好满足用户的需要",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是虚拟存储器，为什么要引入虚拟存储器",
        "content": "虚拟存储器是一种存储器系统, 可以从逻辑上扩充内存容量, 使得程序可以访问比物理内存更大的内存。虚拟存储器的引入是为了解决物理内存不足和程序运行空间不连续的问题。",
        "times": 0
    },
    {
        "category": 6,
        "title": "虚拟存储器的实现原理是什么",
        "content": "在进程中只装入部分的程序和数据, 在外存中保留完整的副本, 运行过程中动态的调整进程在内存的部署",
        "times": 0
    },
    {
        "category": 6,
        "title": "虚拟存储器中如何解决缺页的情况",
        "content": "当要访问的页不在内存中时, 发生缺页中断, 调出缺页中断处理程序, 根据页表中的外存地址, 将页调入内存。如果此时内存中有空闲块的话, 分配一页, 如果没有的话, 就要调出某页, 然后将需要的页调入。",
        "times": 0
    },
    {
        "category": 6,
        "title": "有哪些页面置换算法",
        "content": "1. 最佳置换算法\n2. 先进先出算法\n3. 最久未使用算法\n4. 轮转算法",
        "times": 0
    },
    {
        "category": 6,
        "title": " 什么是抖动，为什么会产生抖动",
        "content": "抖动是虚拟存储管理中, 刚调出的页立即又被调回所形成的频繁调入调出的现象。\n主要的原因有：\n1. 为进程分配的页面太少, 所以经常缺页\n2. 页面置换算法不合理\n3. 进程访问页面的局部性不强",
        "times": 0
    },
    {
        "category": 6,
        "title": "简述处理机的两种状态",
        "content": "处理机有两种状态, 分别是用户态和和心态, 处理机在用户态下只能执行非特权指令, 而在核心态下可以执行特权指令",
        "times": 0
    },
    {
        "category": 6,
        "title": "说明中断和一场的异同",
        "content": "中断又叫做外中断, 中断信号来自CPU执行指令的外部\n异常又叫做内中断, 中断信号来自CPU执行指令的内部, 如溢出, 缺页异常等。",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是系统调用",
        "content": "系统调用是操作系统提供给用户程序使用计算机软硬件资源的接口, 用户只需要专注于应用层面的开发, 而不需要处理底层的计算机硬件资源。",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是银行家算法",
        "content": "银行家算法是一种避免死锁的算法, 原理是避免系统进入不安全状态从而避免死锁。在分配资源前, 他会首先检查资源是否充足, 并且分配完资源之后系统会不会处于不安全状态, 然后他才会分配资源。",
        "times": 0
    },
    {
        "category": 6,
        "title": "用户级线程和内核级线程的区别",
        "content": "1. 用户级线程由应用程序负责, 线程的切换在用户态完成, 内核级线程由操作系统内核负责, 线程的切换在核心态完成。\n2. 内核级线程操作系统是可感知的, 用户级线程操作系统不可感知\n3. 内核级线程才是CPU分配的单位",
        "times": 0
    },
    {
        "category": 6,
        "title": "将用户程序变成可以在内存中执行程序的步骤",
        "content": "1. 编译\n2. 链接\n3. 装入",
        "times": 0
    },
    {
        "category": 6,
        "title": "磁盘调度算法有哪些",
        "content": "1. 先来先服务算法\n2. 最短寻到时间有限算法\n3. 扫描算法\n4. 循环扫描算法",
        "times": 0
    },
    {
        "category": 6,
        "title": "文件的逻辑结构有哪些",
        "content": "逻辑结构说明文件内部是如何组织起来的\n1. 顺序结构\n2. 索引结构\n3. 索引顺序结构",
        "times": 0
    },
    {
        "category": 6,
        "title": "文件的物理结构有哪些",
        "content": "36. 文件的物理结构有哪些\n1. 连续分配\n2. 链接分配\n3. 索引分配",
        "times": 0
    },
    {
        "category": 6,
        "title": " IO控制方式有哪些",
        "content": "1. 程序直接控制方式\n2. 中断驱动控制方式\n3. DMA方式\n4. 通道控制方式",
        "times": 0
    },
    {
        "category": 6,
        "title": "操作系统中引入缓存的作用是什么",
        "content": "1. 减少CPU和IO之间速度不匹配的矛盾\n2. 减少对CPU的中断频率\n3. 提高CPU和IO之间的并行性",
        "times": 0
    },
    {
        "category": 6,
        "title": "指令周期，CPU周期和时钟周期有什么关系",
        "content": "指令周期是一条指令执行所需要的时间, 其中包含若干机器周期\n机器周期是指令执行一个阶段包含的时间, 里面包含若干时钟周期\n时钟周期就是CPU内部一个脉冲信号所需要的时间, 是最小的时间单位",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是FCB，FCB有什么作用",
        "content": "FCB是文件控制块, 也称文件目录, 是操作系统为每一个文件建立的数据结构, 用来存储和管理文件的各种属性信息",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是同步，什么是异步，他们之间有什么联系",
        "content": "同步就是要完成所有的操作, 然后再返回给用户, 异步就是用户将请求放入消息队列, 然后等待处理机响应。就类似于两个人交流, 同步就是两个人打电话交流, 必须要等对方接起电话来, 才能执行下一步。异步相当于是发微信交流, 将消息发送给对方, 然后就可以干其他的事情, 然后等待对方的回信。",
        "times": 0
    },
    {
        "category": 6,
        "title": " 什么是PID，它有什么作用",
        "content": "PID是进程标识符, 作用是唯一的标识系统中的进程, 系统可以根据PID定位到一个唯一的进程",
        "times": 0
    },
    {
        "category": 6,
        "title": "动态分区分配中，什么是内部碎片，什么是外部碎片",
        "content": "内部碎片是分配给作业的存储空间中未被利用的部分\n外部碎片是系统中无法利用的小的存储块",
        "times": 0
    },
    {
        "category": 6,
        "title": "操作系统的组成是什么",
        "content": "操作系统有进程调度程序, 内存管理程序, 设备驱动程序, 文件系统等组成。",
        "times": 0
    },
    {
        "category": 6,
        "title": "存储器管理的功能有什么",
        "content": "1. 内存的分配和回收\n2. 地址变换, 将逻辑地址转换为物理地址\n3. 扩充内存容量\n4. 存储保护\n5. 地址重定位",
        "times": 0
    },
    {
        "category": 6,
        "title": "什么是交换技术，什么是覆盖技术，他们的区别是什么",
        "content": "交换技术就是把暂时不用的程序或者数据从内存中移出去, 腾出更多的空间",
        "times": 0
    },
    {
        "category": 6,
        "title": "为什么要引入cache，cache地址映像的方式",
        "content": "引入cache主要是为了缓和CPU和内存之间速度不匹配的矛盾, 利用了局部性的原理。\ncache的地址映像方式有\n1. 全相联映射\n2. 组相联映射\n3. 直接映射",
        "times": 0
    },
    {
        "category": 6,
        "title": "",
        "content": "",
        "times": 0
    },
    {
        "category": 4,
        "title": "计算机系统的层次结构是什么",
        "content": "计算机系统从低级到高级可以分为五个层次, 分别是\n1. 硬件层\n2. 操作系统层\n3. 应用程序层\n4. 高级语言层\n5. 用户层",
        "times": 0
    },
    {
        "category": 4,
        "title": "冯诺依曼计算机的特点是",
        "content": "1. 计算机由运算器, 存储器, 控制器, 输入输出设备组成\n2. 指令和数据以同等地位存放于存储器内, 并可按地址寻址\n3. 指令和数据都可以用二进制代码表示\n4. 指令由操作码和地址码组成, 操作码用来表示操作的性质, 地址码用来表示操作数的位置\n5. 指令在存储器内按顺序存放, 通常是顺序执行的, 但可以根据设定的条件改变执行顺序\n6. 计算机以运算器为中心, 输入输出设备与存储器的数据传送通过运算器",
        "times": 0
    },
    {
        "category": 4,
        "title": "控制器的功能是什么",
        "content": "控制器可以对当前指令进行译码分析, 然后产生控制信号, 控制各部件按照指令去进行工作",
        "times": 0
    },
    {
        "category": 4,
        "title": "运算器的功能是什么",
        "content": "完成算术和逻辑运算, 并且暂存中间结果",
        "times": 0
    },
    {
        "category": 4,
        "title": "计算机硬件的技术指标有什么",
        "content": "1. 机器字长\n2. 指令字长\n3. 存储字长\n4. 主频\n5. MIPS",
        "times": 0
    },
    {
        "category": 4,
        "title": "计算机发展的五个阶段是什么",
        "content": "1. 电子管\n2. 晶体管\n3. 中小规模集成电路\n4. 大规模集成电路\n5. 超大规模集成电路",
        "times": 0
    },
    {
        "category": 4,
        "title": "系统总线是什么，他有哪些分类",
        "content": "系统总线是计算机各部件之间的信息传输线, 主要分为数据总线, 地址总线和控制总线\n数据总线主要用来传输各种数据信息\n地址总线用来指出数据的地址\n控制总线用来传输控制信号",
        "times": 0
    },
    {
        "category": 4,
        "title": "什么是总线仲裁，他有哪些实现方式",
        "content": "总线仲裁就是计算机内各个部件同时竞争总线资源的过程, 需要仲裁出优先级最高的部件, 然后分配总线资源。\n总线总裁的实现方式主要有集中式总线总裁, 其中包括\n1. 链式查询方式\n2. 计数器定时查询方式\n3. 独立请求方式",
        "times": 0
    },
    {
        "category": 4,
        "title": "什么是RAM，什么是ROM，他们之间有什么区别",
        "content": "RAM是随机访问存储器, ROM是只读存储器。\nRAM在程序执行过程中可以读, 也可以写, 但是保存的信息会断电丢失\nROM在程序执行的过程中, 只能读出里面的数据, 不能写数据, 而且信息在断电之后也不会丢失\nRAM主要是用来做计算机的内存或Cache, ROM主要是做BIOS等",
        "times": 0
    },
    {
        "category": 4,
        "title": "DRAM和SRAM有什么区别，各有什么用途",
        "content": "DRAM是动态RAM, 存取速度慢, 容量大, 集成度高, 需要不断的刷新, 常用来做内存\nSRAM是静态RAM, 存取速度快, 集成度低, 常用来做cache",
        "times": 0
    },
    {
        "category": 4,
        "title": "DRAM的刷新方式有哪些",
        "content": "主要有集中刷新, 分散刷新和异步刷新3种",
        "times": 0
    },
    {
        "category": 4,
        "title": "我们说的32位电脑，64位电脑中的32位，64位指的是什么",
        "content": "指的是数据总线的宽度, 32位, 64位指的是他们每次能够处理数据的位数, 也决定了他们能够寻址的最大的内存地址大小",
        "times": 0
    },
    {
        "category": 4,
        "title": "什么是程序的局部性原理",
        "content": "是程序在执行的时候会出现局部性规律, 也就是在一段时间内, 整个程序只会执行程序的某个部分, 所访问的存储空间也只会局限于某个内存区域。局部性原理分为时间局部性和空间局部性。",
        "times": 0
    },
    {
        "category": 4,
        "title": "存储系统的层次结构和每个层次的作用是什么",
        "content": "1. 存储系统可以分为三个层次, 分别是cache, 主存, 辅存\n2. Cache的引入主要是解决速度和价格之间的矛盾, 基于局部性原理, 将最有可能访问到的数据放到Cache中, 减少CPU访存的次数\n3. 主存中是存放有当前正在执行的所有程序和数据\n4. 辅存主要是存放计算机所有的暂时不用的程序和数据, 就类似家里面的仓库, 如果有需要的, 再从里面取",
        "times": 0
    },
    {
        "category": 4,
        "title": "存储器容量扩展的方式有哪些",
        "content": "有字扩展, 位扩展, 字位扩展",
        "times": 0
    },
    {
        "category": 4,
        "title": "什么是高位交叉编织，什么是低位交叉编址",
        "content": "在存储器读写中, 为了提高存储器的访问速度和效率, 采用数据交叉编织技术, 就是将原来连续的数据存储在不同的存储器中, 实现存储器的并行读写。\n高位交叉编织是将多个数据块的高位字节交错存储, 低位交叉编织是将多个数据块的低位字节交错存储。\n低位交叉编织可以提高存储器的并行访问效率",
        "times": 0
    },
    {
        "category": 4,
        "title": "cache和主存地址映射的方式",
        "content": "1. 全相联映射：每个主存块都映射到任何cache\n2. 直接映射：一个主存快映射到唯一的一个块\n3. 组相联映射：将存储空间分成若干组, 组间直接映像, 组内全相联映像",
        "times": 0
    },
    {
        "category": 4,
        "title": "IO接口有什么功能",
        "content": "IO接口主要有数据传输, 控制信号传递, 协议转换, 信息缓存, 设备管理等功能",
        "times": 0
    },
    {
        "category": 4,
        "title": "IO接口和主机信息传送的控制方式有哪些",
        "content": "1. 程序查询方式：CPU时刻查询IO是否准备好了, 主机和IO是串行工作的\n2. 程序中断方式：IO准备就绪之后发出一个中断信号, 然后CPU响应中断信号, 去处理IO\n3. DMA方式：由DMA控制器来控制IO数据的传送, 直接传送到内存",
        "times": 0
    },
    {
        "category": 4,
        "title": "DMA访问主存和CPU访问主存哪个优先级高，为什么",
        "content": "DMA访问主存的优先级高\n因为DMA连接的是高速外设, 如果不及时将数据传送到内存的话, 可能会造成信息的丢失, 之后传送的数据就覆盖当前的数据了, 所以需要更高的优先级。",
        "times": 0
    },
    {
        "category": 4,
        "title": " IEEE754中float的格式是什么样的",
        "content": "float占用32位, 最高位是符号位, 之后8位是阶码位, 采用移码表示, 最后23位是尾数, 采用原码表示, 隐藏最高位",
        "times": 0
    },
    {
        "category": 4,
        "title": "浮点数加减法运算的步骤是什么",
        "content": "对阶, 尾数求和, 规格化, 舍入, 溢出判断",
        "times": 0
    },
    {
        "category": 4,
        "title": "计算机中的寻址方式有哪些",
        "content": "有直接寻址, 间接寻址, 寄存器直接寻址, 寄存器间接寻址, 变址寻址, 基址寻址等",
        "times": 0
    },
    {
        "category": 4,
        "title": "说说CPU的功能",
        "content": "1. 指令控制\n2. 操作控制\n3. 时间控制\n4. 数据加工\n5. 中断处理",
        "times": 0
    },
    {
        "category": 4,
        "title": "一个完整的CPU指令周期应该包含哪些机器周期",
        "content": "应该包含取指周期, 间址周期, 执行周期, 中断周期",
        "times": 0
    },
    {
        "category": 4,
        "title": "列举出CPU中的几个寄存器，并说明他们的功能",
        "content": "1. PC：程序计数器, 用来指向当前将要执行指令的地址\n2. IR：指令寄存器, 存放正在执行的指令\n3. MAR：存储器地址寄存器, 用来存放CPU将要访问的存储单元\n4. MDR：存储器数据寄存器, 用来存放从存储单元读出写入的数据\n5. PWD：程序状态字寄存器, 用来存放经过运算后的各种状态信息",
        "times": 0
    },
    {
        "category": 4,
        "title": "CPU相应处理一次中断的步骤",
        "content": "处理一次中断的步骤为：关中断, 断点保护, 识别中断源, 保护现场, 中断事件处理, 恢复现场, 开中断, 中断返回",
        "times": 0
    },
    {
        "category": 4,
        "title": "阵列机实现高效并行计算的途径是什么",
        "content": "有硬件并行, 软件并行, 数据并行, 任务并行, 分布式处理",
        "times": 0
    },
    {
        "category": 4,
        "title": "对于程序员透明是什么意思",
        "content": "对于程序员透明的意思是, 对于某些应用程序, 他的底层实现细节对于程序员来说是隐藏的, 程序员并不需要知道他的实现细节。",
        "times": 0
    },
    {
        "category": 4,
        "title": "RISC和CISC的区别",
        "content": "CISC是复杂指令集, RISC是精简指令集, CISC中包含了大量的指令集, 每个指令都可以完成一系列的操作, 并由硬件直接执行。而RISC精简了指令集的数量, 增多了通用寄存器的数量, 让他可以更快的执行一些算法和函数。此外RISC一定是要采用流水线技术运行的, 而CISC则不一定要采用流水线方式",
        "times": 0
    },
    {
        "category": 4,
        "title": " 计算机层次结构是什么",
        "content": "从底层到顶层分别是\n2. 微程序机器\n3. 机器语言\n4. 操作系统虚拟机\n5. 汇编语言虚拟机\n6. 高级语言虚拟机\n7. 应用语言虚拟机",
        "times": 0
    },
    {
        "category": 4,
        "title": "翻译和解释有什么区别",
        "content": "1. 翻译是一对一的, 一条代码对应一个指令\n2. 解释是一对多的, 一条高级语言代码对应若干条指令\n3. 解释执行比翻译花的时间多, 但存储空间占用比较少 ",
        "times": 0
    },
    {
        "category": 4,
        "title": "什么是流水线技术",
        "content": "将一个重复的时序过程分解成若干个子过程, 每个子过程都可以有效的在其专用功能段上和其他子过程同时执行, 这就是流水线技术",
        "times": 0
    },
    {
        "category": 4,
        "title": "简述一下流水线中指令执行的过程",
        "content": "1. 首先对于MIPS指令来说, 可以划分为五个阶段, 分别是取指令, 指令译码, 执行, 存储器访问和写回\n2. 首先是取指令阶段, 根据PC值从存储器中取出相应指令, 并将指令放到指令寄存器IR中, PC的值+1, 指向下一跳指令\n3. 然后是指令译码, 将IR中的指令翻译为计算机可以执行的操作\n4. 之后是执行阶段, 处理器根据指令确定的操作和数据进行操作\n5. 之后是存储器访问的阶段, 主要是从存储器中访问数据到处理器\n6. 最后是写回阶段, 就是将最终处理器得到的结果写回到寄存器中或者内存中",
        "times": 0
    },
    {
        "category": 4,
        "title": "流水线中的相关有哪几类",
        "content": "1. 结构相关, 指令在流水线执行的过程中, 由于硬件资源不足导致满足不了当前流水的要求。比如说一边需要访问存储器得到指令, 一边需要访问存储器得到数据, 这时就发生了结构相关\n2. 数据相关, 一条指令的运行过程中需要前一条指令的运行结果, 所以发生了数据相关\n3. 控制相关, 在指令执行过程中, 由于跳转等操作改变了PC的值, 这时发生了控制相关",
        "times": 0
    },
    {
        "category": 4,
        "title": "什么是微程序控制器，什么是硬件布线控制器，他们各有什么优缺点",
        "content": "微程序控制器和硬件布线控制器是两种不同的CPU控制器设计方法, 微程序控制器是通过微程序来实现指令的正常执行, 而硬件布线控制器是通过电路的方式来实现指令的执行。\n微程序控制器的优点是设计灵活, 易于修改和扩展, 缺点是速度较慢\n硬件布线控制器和微程序控制器正好相反",
        "times": 0
    },
    {
        "category": 4,
        "title": "什么是串行传输，什么是并行传输，都有什么特点",
        "content": "1. 串行传输是使用一根传输线传输数据, 适合长距离传输\n2. 并行传输是使用多根线一起传输数据, 适合短距离传输",
        "times": 0
    },
    {
        "category": 4,
        "title": "RAID是什么，为什么要引入RAID",
        "content": "RAID是冗余磁盘阵列, 将多个物理磁盘组成成为一个或多个逻辑单元, 实现数据冗余或提高读写性能。RAID主要是为了解决单个磁盘的可靠性, 性能和容量的问题, 因为单个磁盘的话很容易由于这个磁盘损坏或者丢失造成数据的丢失, 同时性能和容量也有限, 这个时候RAID就很重要了。",
        "times": 0
    },
    {
        "category": 4,
        "title": "流水线越多，并行度越高，是不是流水段越多，指令执行的就越快",
        "content": "不是的, 主要原因有以下几点\n1. 流水线之间的缓冲需要一定的开销, 增加流水线的段数, 就会增加不同流水段之间转换的开销\n2. 流水段的增多会导致段间控制逻辑更多更复杂, , 可能导致流水段之间控制的成本会更高",
        "times": 0
    },
    {
        "category": 4,
        "title": "引入总线结构的作用",
        "content": "1. 简化系统结构, 便于系统设计\n2. 减少连线数目, 便于布线, 减少体积\n3. 便于接口设计\n4. 便于系统的扩充",
        "times": 0
    },
    {
        "category": 4,
        "title": "中断响应优先级和中断处理优先级分别指的是什么",
        "content": "1. 中断响应优先级是CPU对不同的中断请求的相应顺序, 也就是当某个时刻同时发生中断, 此时中断响应优先级高的被响应。\n2. 中断处理优先级是指CPU对已经响应的中断处理的顺序, 用中断屏蔽字来实现, 就是比如在一个中端正在处理的时候, 此时发生了另一个中断处理优先级更高的中断, 就要响应新的中断, 处理完之后再处理当前被终止的中断",
        "times": 0
    },
    {
        "category": 4,
        "title": "程序中断和调用子程序有什么区别",
        "content": "1. 调用子程序通常是程序设计者实现安排好的, 有确定的时间和地点, 而程序中断通常情况下是随机的, 由程序运行的状态决定\n2. 程序中断完全是为了主程序服务的, 而调用子程序和主程序的关系是单纯的软件处理的关系\n3. 在内存堆栈允许的范围内, 子程序调用可以无限嵌套, 但是中断的嵌套要考虑中断处理优先级。",
        "times": 0
    },
    {
        "category": 4,
        "title": ".c文件转化为可执行文件的过程",
        "content": "1. 预处理, 修改.c文件, 将他的一些头文件什么的直接插入到程序文本当中, 得到.i文件\n2. 编译, 将文件编译为一个汇编语言程序, 得到.s文件\n3. 汇编, 将汇编语言程序翻译为机器语言程序, 得到.o文件\n4. 链接, 将所有库函数和目标文件链接到最终的文件中, 得到可执行文件",
        "times": 0
    },
    {
        "category": 4,
        "title": " 什么是编译器，什么是解释器",
        "content": "编译器和解释器都是将高级语言转换成机器语言的工具, 但是他们的工作原理不同。编译器是首先将一个程序文件转换成可执行文件, 然后运行这个文件。解释器是边读取文件中的代码, 然后按行一行一行的解释执行。",
        "times": 0
    },
    {
        "category": 8,
        "title": "什么是时间复杂度，什么是空间复杂度",
        "content": "1. 时间复杂度是执行算法需要的计算工作量, 其大小反映了算法运行时间的增长趋势\n2. 空间复杂度是执行算法需要的内存空间, 大小反映了占用内存空间的大小",
        "times": 0
    },
    {
        "category": 8,
        "title": "C++中继承是什么意思",
        "content": "继承就是当我们创建一个新的类的时候, 可以继承于某个已经存在的类, 也就是基类。那么继承类就获得了基类所有的除私有类型之外的数据成员还有方法, 然后继承类可以在基类基础上添加一些自己独有的数据成员和方法。C++共有三种继承方式, 公有继承、保护继承和私有继承, 通常我们用的是公有继承。",
        "times": 0
    },
    {
        "category": 8,
        "title": "C++中什么是虚函数呢",
        "content": "虚函数是一种可以在子类中被覆盖的特殊函数, 他的使用主要是为了支持多态性, 让程序能根据对象的实际类型来调用相应的函数。使用虚函数的常见场景就是通过基类的指针或者引用来调用子类的函数。",
        "times": 0
    },
    {
        "category": 8,
        "title": "什么是多态性",
        "content": "多态性就是同一种操作作用于不同对象时, 可以有不同的解释和执行方式。主要分为两种, 静态多态性和动态多态性。静态多态性是编译时多态, 主要包括函数重载和运算符重载等。动态多态性是运行时多态, 通常是基类声明虚函数, 然后子类可以覆盖这个基类, 实现不同对象的不同行为",
        "times": 0
    },
    {
        "category": 8,
        "title": "C++中引用和指针有什么区别和联系",
        "content": "指针是一个变量, 大小是固定的, 用来存储另一个对象的内存地址。如果要获得对象的值的话, 需要解指针。而引用是给已经存在的对象起了一个别名, 当用他去访问对象的内容时, 不需要解指针, 可以像访问变量一样访问引用所引用的对象。",
        "times": 0
    },
    {
        "category": 8,
        "title": "什么是红黑树呢",
        "content": "红黑树是一种自平衡二叉搜索树, 保证基本操作的时间复杂度是O(logn)级别, 相比于其他自平衡树, 比如说平衡二叉树来说, 它牺牲了一些平衡性获得更好的性能表现。红黑树的结点包含颜色信息, 可以是红色或者黑色, 通过一些限制来保证树的平衡。",
        "times": 0
    },
    {
        "category": 8,
        "title": "什么是线性表",
        "content": "线性表是一种数据结构, 由n个具有相同特性的数据元素组成的有限序列, 其中除了第一个和最后一个元素之外, 每个元素都只有唯一的前驱和后继。",
        "times": 0
    },
    {
        "category": 8,
        "title": "什么是KMP算法",
        "content": "KMP算法是一种字符串的模式匹配算法, 可以在O(m+n)的时间复杂度实现两个字符串的模式匹配。主要是利用模式串的信息, 构造next数组, 然后进行匹配, 可以实现指向主串的i指针不回溯。",
        "times": 0
    },
    {
        "category": 8,
        "title": "介绍一下冒泡算法",
        "content": "冒泡算法是一种简单直观的排序算法, 他的基本思想是\n1. 比较相邻的两个元素, 如果第一个比第二个大, 就交换位置\n2. 对每两个相邻的元素都执行这样的操作, 从开始第一对到最后一对, 这就是一趟排序, 一趟排序后, 最大的元素被移到最后\n3. 然后除了最后一个元素之外, 重复上述步骤\n4. 最后对每次都越来越少的序列重复上述步骤, 直到一趟下来没有再需要交换的元素",
        "times": 0
    },
    {
        "category": 8,
        "title": "介绍一下快速排序算法",
        "content": "快排是一种基于分治思想的排序算法, 主要步骤如下：\n1. 首先从数列中选择一个元素作为基准元素\n2. 重新排列这段数列, 比基准元素小的放左边, 比基准元素大的放右边, 基准元素处在中间的位置\n3. 然后递归的对由基准元素分开的两个子序列进行上述步骤。",
        "times": 0
    },
    {
        "category": 8,
        "title": "描述时间复杂度的O的记号是什么意思",
        "content": "O是一种表示算法运行时间与输入规模增长趋势之间的变化趋势的符号, 他的意思是表示这个算法的时间量度的数量级。比如说一个算法的运行时间和输入的关系是T(n) = n^2, 那么他的时间复杂度就是O(n^2)",
        "times": 0
    },
    {
        "category": 8,
        "title": "顺序表和链表有什么区别，他们各有什么优缺点",
        "content": "顺序表和链表都是数据的物理结构\n顺序表中数据是存放在一大片连续的内存空间的, 而链表中数据存放在离散的内存空间, 通过指针相连。\n顺序表的优点在于他的结构简单, 并且很方便查找与其中元素的更改, 但是不能方便的删除和插入元素, 同时需要一段连续的内存空间, 有时可能无法被满足。\n链表的优点在于链表不需要一片连续的内存空间, 同时删除和插入元素是很方便的。缺点在于每当要查找元素时, 都要从头开始遍历, 同时在存储过程中, 指向下一个结点的指针也要耗费一部分的内存空间",
        "times": 0
    },
    {
        "category": 8,
        "title": "栈和队列都有哪些具体的应用",
        "content": "栈：表达式求值, 括号匹配检验, 函数递归\n队列：树的层次遍历, 进程的调度中先来先服务算法。",
        "times": 0
    },
    {
        "category": 8,
        "title": "常用的二叉树遍历算法有哪些，算法过程是什么",
        "content": "常用的二叉树遍历算法有前序遍历, 中序遍历, 后序遍历和层次遍历。\n其中前序遍历是先遍历根节点, 然后遍历左子树, 最后是右子树\n中序遍历是先遍历左子树, 然后遍历根节点, 最后是右子树\n后序遍历是先遍历左子树, 然后遍历右子树, 最后是根节点\n层次遍历是对二叉树中的每个结点都逐层访问",
        "times": 0
    },
    {
        "category": 8,
        "title": "二叉树怎么存储",
        "content": "有两种二叉树存储的方法\n1. 顺序存储法：用连续的单元从上到下从左到右存储完全二叉树的结点信息, 如果不是完全二叉树的话, 对应的结点就为空\n2. 链式存储法：每一个结点有两个指针, 分别指向他的左子树和右子树",
        "times": 0
    },
    {
        "category": 8,
        "title": "什么是最小生成树，构造最小生成树的算法有什么",
        "content": "最小生成树是一个连通图的极小连同子图，包含原图中所有顶点和尽可能少的边。\n构造最小生成树的方法有Prim算法和Kruskal算法。",
        "times": 0
    },
    {
        "category": 8,
        "title": "什么是哈希表，有哪些哈希表的构造方法",
        "content": "哈希表它把其中元素的关键键值映射为元素存储位置, 构造方法有：\n1. 直接定址法\n2. 数字分析法\n3. 平方取中法\n4. 除留余数法",
        "times": 0
    },
    {
        "category": 8,
        "title": "数据有哪些存储结",
        "content": "有顺序存储, 链式存储, 索引存储和散列存储",
        "times": 0
    },
    {
        "category": 8,
        "title": "树的存储结构有哪些",
        "content": "有双亲表示法, 孩子表示法和孩子兄弟表示法\n双亲表示法：用一段连续的空间来存储每个结点, 左边的部分表示数据, 右边的部分表示其双亲在数组中的位置\n孩子表示法：同样用一段连续的空间存储每个结点, 左边的空间存储数据, 右边的空间是将每个结点的孩子结点用单链表链接起来形成的一个线性结构\n孩子兄弟表示法：用二叉树的存储方法来存储树, 遵循左孩子右兄弟的规则",
        "times": 0
    },
    {
        "category": 8,
        "title": "什么是二叉排序树",
        "content": "二叉排序树或是一个空树, 或是一个拥有如下性质的树\n1. 如果左子树非空, 那么左子树的所有结点小于根节点\n2. 如果右子树非空, 那么右子树的所有结点大于根节点\n3. 左右子树也都是二叉排序树",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是PRG，介绍几个你知道的PRG算法",
        "content": "PRG是伪随机数生成器, 通常就是给他一段短的种子密钥, 然后可以按照一定的算法生成一段很长的随机序列。常用的PRG有\n2. 线性同余法, 用线性方程来产生数字序列, 已经被淘汰了\n3. Salsa20",
        "times": 0
    },
    {
        "category": 1,
        "title": "流密码加密有什么优势和劣势",
        "content": "1. 优势\n1. 加密速度快\n2. 适用于大量或少量的数据, 不用进行分组\n2. 劣势\n1. 同一个密钥不能重复加密\n2. 需要高质量的PRG, 否则密钥会被预测\n3. 当对特定位置经过修改之后可能会被探测到",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是循环冗余校验",
        "content": "循环冗余校验是一种检测数据传输过程中是否出现错误的技术, 主要是利用除法还有余数的原理来实现校验的。产生一个固定的校验码, 跟在数据的后面, 用来判断数据是否出错",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是MAC消息认证码",
        "content": "MAC消息认证码是通过特定的算法来让一段数据产生一段特定的信息, 然后用这段信息来检测数据的完整性, 同时也可以进行身份的验证。MAC消息认证码包含两个算法, 分别是签名算法和认证算法。具体的方法有CBC-MAC和HMAC",
        "times": 0
    },
    {
        "category": 1,
        "title": "CBC-MAC的基本步骤是什么呢",
        "content": "主要是利用分组密码和CBC模式去构建消息认证码。具体来说就是选择一种分组密码算法, 然后将消息分成若干组m0, m1, m2到mn, 然后首先m0进行加密, 之后的密文和m1进行异或之后加密, 以此类推, 最后mn的密文再加密的密文再进行截断就是消息认证码, 之前所有的密文都可以丢弃。",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是哈希函数",
        "content": "哈希函数就是把一个任意长度的数据映射为固定长度数据的函数, 可以用来检测数据的完整性, 判断两个数据是否相等等, 常用的哈希函数有MD5, SHA-256等",
        "times": 0
    },
    {
        "category": 1,
        "title": "单向陷门函数和单向函数的区别",
        "content": "单向函数不能用来加密, 因为无人可以解开它\n单向陷门函数不是单向函数, 只是对于不知道陷门的人表现出了单向函数的特性",
        "times": 0
    },
    {
        "category": 1,
        "title": "密码学的目标是什么",
        "content": "密码学的目标主要有五个, 即\n1. 保密性\n2. 认证性\n3. 完整性\n4. 不可否认性\n5. 可用性",
        "times": 0
    },
    {
        "category": 1,
        "title": " 哈希函数需要满足的安全目标是什么",
        "content": "1. 单向性：对于任意给定的消息, 计算它的哈希值很容易, 但是从哈希值反推消息不可行\n2. 弱抗碰撞：对于给定消息, 要找到另一个和这个消息的哈希值一样的消息是不可行的\n3. 强碰撞性：找到两个任意哈希值相同的消息是不可行的",
        "times": 0
    },
    {
        "category": 1,
        "title": "说明混淆和扩散的定义，还有他们的作用",
        "content": "混淆和扩散是设计密码体制的两种基本方法, 目的是为了抵抗对于密码体制的统计分析。混淆主要是为了让密文和密钥的关系更加复杂, 扩散是为了让明文和密文的关系更加复杂",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是SPN结构",
        "content": "SPN结构也就是代换置换网络, 是一种分组密码的结构, 在AES中用的就是SPN结构。",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是Feistel结构",
        "content": "Feistel结构是一种对称密码结构, 是最广泛的分组密码结构之一, 在DES算法中运用的就是Feistel结构, 具体结构是明文分成两个部分L0和R0, 一次循环中L1等于R0, R1等于R0经过加密函数然后和L0的异或, 依次进行。",
        "times": 0
    },
    {
        "category": 1,
        "title": "保密系统满足的安全性假设是什么",
        "content": "这些假设包括：密钥是随机的, 攻击者无法获得密钥, 攻击者无法获得明文, 攻击者无法获得密文, 攻击者无法获得加密算法细节等",
        "times": 0
    },
    {
        "category": 1,
        "title": "为什么分组密码和流密码都要保证(IV, K)不重复使用",
        "content": "因为如果重复使用的话, 攻击者可以通过分析加密结果, 推算出密钥, 从而破解加密。",
        "times": 0
    },
    {
        "category": 1,
        "title": "密码系统安全性的定义有几种，分别是什么",
        "content": "密码系统安全性的定义主要有两种, 分别是基于信息论的方法和基于计算复杂性理论的方法\n1. 基于信息论的方法关注点在密文中是否含有任何明文的信息, 如果密文中不含有明文的任何信息就是安全的\n2. 基于计算复杂性理论的方法考虑是否在有效时间内能够将密文中蕴含的明文中的信息提取出来。",
        "times": 0
    },
    {
        "category": 1,
        "title": "介绍一下Diffie-Hellman交换协议的过程",
        "content": "Diffie-Hellman交换协议是一个安全协议, 可以让双方在完全没有任何预先信息的条件下通过不安全信道建立一个密钥, 具体过程是这样的：\n1. 选取一个大质数p, 再选取一个本原元a, 这两个数是公开的\n2. U和V各有一个私有密钥xu和xv\n3. U向V发送信息a的xu次mod p\n4. V向U发送信息a的xv次 mod p\n5. 然后双方在对方发送的消息的基础上再加上自己的密钥的次方, 再mod p, 就得到了相同的密钥。",
        "times": 0
    },
    {
        "category": 1,
        "title": "Diffie-Hellman交换协议有什么优缺点",
        "content": "优点：\n1. 双方可以在事先没有协商的情况下在不安全的信道交换对称密钥信息\n2. 在通信结束之后可以丢弃密钥信息, 没有保密的负担\n缺点：\n容易受到中间人进攻, 所以需要可信服务中心的存在",
        "times": 0
    },
    {
        "category": 1,
        "title": "如何用哈希函数对长消息进行签名",
        "content": "首先用哈希函数将一段长消息转换为一段短消息, 然后再用数字签名算法对短消息进行签名。在认证时, 首先将长消息转换成短消息, 然后用公钥对上述的签名进行解密, 看看两个短消息是否相同。",
        "times": 0
    },
    {
        "category": 1,
        "title": "DES算法中S盒的作用是什么",
        "content": "1. S盒主要是将48位比特的输入压缩为32位, 当两个输入相差1比特时, 输出相差2比特\n2. S盒是DES算法的核心, 也是DES算法中唯一的非线性结构",
        "times": 0
    },
    {
        "category": 1,
        "title": " DES算法和AES算法之间有哪些相似之处",
        "content": "1. 两者的轮函数都是由三层构成的, 分别是非线性层, 线性混合层和子密钥异或层\n2. 他们都是分组密码, 都对固定长度的块加密\n3. 都采用密钥扩展算法, 都根据密钥生成若干个子密钥",
        "times": 0
    },
    {
        "category": 1,
        "title": "信息安全中常用的攻击有什么",
        "content": "有中断, 截取, 篡改, 伪造和重放",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是单表代换密码",
        "content": "单表代换密码是一种替代密码, 就是将明文中的每个字母按照一个固定的映射关系表格进行替换。",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是多表代换密码",
        "content": "多表代换密码是一种替代密码, 就是有多个代换表, 表中标识者每一个明文和密文的字母的一一对应关系, 循环的利用这些表, 就得到了密文。",
        "times": 0
    },
    {
        "category": 1,
        "title": "什么是数字信封",
        "content": "数字信封是一种加密技术, 用加密技术来保证只有特定的人才能阅读信息的内容。数字信封中, 发送方首先用对称加密来加密信息, 然后用收件人的公钥来加密密钥。加密后的密钥和信息被传输给收件人, 只有通过收件人的私钥才能解密密钥, 进而解密信息。",
        "times": 0
    },
    {
        "category": 2,
        "title": "TCP传输的可靠性表现在哪些方面",
        "content": "TCP是一种面向连接的传输协议, 我认为TCP传输的可靠性主要表现在以下方面\n1. 确认和重传, 接收方接收到发送方发送的数据后会发送确认信息, 如果没有收到发送方发送的消息就不会发送确认信息, 那么一段时间之后发送方就会重新传送信息\n2. 流量控制：TCP采用滑动窗口机制来进行流量控制, 确保发送方的数据不会超过接收方能够处理的极限\n3. 拥塞控制：TCP采用拥塞控制机制来避免网络拥塞, 确保网络可靠性\n4. 数据检验：TCP中有校验和来确保数据在传输的过程中没有被破坏或是被篡改",
        "times": 0
    },
    {
        "category": 2,
        "title": "防火墙是什么",
        "content": "防火墙是一种网络安全设备, 可以在计算机网络和互联网之间建立一道屏障, 控制网络流量的进出, 以确保网络不受未经授权的访问, 攻击或是威胁。\n防火墙主要分为软件防火墙和硬件防火墙。软件防火墙是个运行在计算机的程序, 可以监视和控制进出计算机的网络流量。硬件防火墙是一种独立设备, 运行在网络的边界, 保护整个网络。\n防火墙主要采用的技术和策略有：访问控制, NAT, VPN, 威胁检测等。",
        "times": 0
    },
    {
        "category": 2,
        "title": "防火墙有哪些分类，有什么作用",
        "content": "防火墙主要分为软件防火墙和硬件防火墙。软件防火墙是个运行在计算机的程序, 可以监视和控制进出计算机的网络流量。硬件防火墙是一种独立设备, 运行在网络的边界, 保护整个网络。",
        "times": 0
    },
    {
        "category": 2,
        "title": "说一下你了解的网络安全方面的专有名词",
        "content": "1. 防火墙：一种网络安全设备, 可以在计算机网络和互联网之间建立一道屏障, 控制网络流量的进出, 以确保网络不受未经授权的访问, 攻击或是威胁。\n2. 入侵检测系统（IDS）：是一种网络安全设备, 用来检测和相应网络中的入侵行为。\n3. 入侵防御系统(IPS)：是一种网络安全设备, 用来防止网络中的入侵行为, 提供实时防御和响应能力",
        "times": 0
    },
    {
        "category": 2,
        "title": " IDS是什么",
        "content": "IDS是一种网络安全设备, 用来检测和响应网络中的入侵行为。主要通过监测网络流量, 系统日志和其他相关事件来检测是否存在异常行为。\nIDS可以分为两种类型, 网络IDS和主机IDS, 网络IDS在网络流量上运行, 用来监测网络流量是否有异常。而主机IDS在主机运行, 主要检测操作系统和应用程序的日志",
        "times": 0
    },
    {
        "category": 2,
        "title": " IPS是什么",
        "content": " IPS是一种网络安全设备, 用来防止网络中的入侵行为, 提供实时防御和响应能力。通常放置在网络边界, 监测防止从外部网络进入内部网络的威胁。\n IPS可以分为两种类型, 网络IPS和主机IPS\n IPS不仅可以检测威胁, 也可以采用主动措施, 防止威胁的扩散或对系统造成危害。",
        "times": 0
    },
    {
        "category": 2,
        "title": "http和https有什么区别",
        "content": " http和https都是作用在应用层的协议, 用来在服务端和客户端提供数据传输服务, 他们之间的主要区别在于安全性。\n http协议的数据在传输过程中不加密, 因此很容易被窃取和修改, https协议则通过TLS协议对数据进行加密, 保障了传输过程中的安全性。\n 此外, 因为https还要进行加密解密的操作, 所以传输性能相比于http要稍弱一些",
        "times": 0
    },
    {
        "category": 2,
        "title": "VPN你了解多少，他的端口号是什么",
        "content": " VPN是虚拟专用网络, 是一种通过公用网络建立安全连接的技术, 主要用来实现远程访问, 数据传输加密等, 可以让用户远程访问公司或者学校的私有网络资源, 同时保证数据传输的安全性和隐私性。\n VPN常见的协议有PPTP, L2TP等, PPTP的端口号是1723, L2TP的端口号是500",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是DOS攻击，怎么应对DOS攻击",
        "content": "DOS攻击是一种恶意攻击行为, 通常是发送大量的数据流或者是连接请求来占用目标服务器的带宽, 计算资源和存储资源等, 导致服务器没有办法处理其他合法的请求。\n要应对DOS攻击, 可以采用下面的措施\n1. 配置防火墙, 屏蔽未知来源的数据包\n2. 限制某些IP或端口的数据流量\n3. 加强服务器性能",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是SQL注入攻击，怎么应对",
        "content": "SQL注入攻击指的就是输入恶意的SQL代码, 绕过应用程序的认证和授权阶段, 直接访问和控制数据库\n要应对SQL注入攻击, 可以采用下面的措施\n1. 输入过滤, 对用户的输入进行过滤盒检查\n2. 最小化权限, 为数据库用户分配尽可能小的权限",
        "times": 0
    },
    {
        "category": 2,
        "title": "你主要用过哪些虚拟机",
        "content": "我主要用过vmware, 在上面运行ubuntu, 我的毕设有一部分就是在虚拟机上做的。",
        "times": 0
    },
    {
        "category": 2,
        "title": "安全体系结构中定义的安全服务通常包括什么",
        "content": "应该能提供以下安全服务\n1. 机密性：保证只有被授权的用户才能访问加密后的数据\n2. 完整性：保证数据不被篡改, 损坏或删除\n3. 不可否认性：发送者发送的消息不能否认, 接受者接收到消息也不能否认",
        "times": 0
    },
    {
        "category": 2,
        "title": " 安全机制有哪些",
        "content": "安全机制指的是计算机网络中采用的保护机制, 主要的安全机制有\n1. 访问控制：根据实体的身份和有关信息来确认实体的访问权限\n2. 加密：包括对称加密和非对称加密\n3. 数字签名：对数据进行数字签名, 来验证信息的完整性和身份认证\n此外还有\n5. 防火墙\n6. 入侵检测和预防系统\n7. 等",
        "times": 0
    },
    {
        "category": 2,
        "title": "从体系上看，Internet网络安全问题可以分为哪几个层次",
        "content": "可以分为用户层, 应用层, 操作系统层, 数据链路层和网络层",
        "times": 0
    },
    {
        "category": 2,
        "title": "采用TCP/IP的应用层服务有哪些",
        "content": "主要有\n1. 邮件传输协议SMTP\n2. 文件传输协议FTP\n3. 超文本传输协议HTTP\n4. 域名系统DNS",
        "times": 0
    },
    {
        "category": 2,
        "title": "用户或者系统可以用哪几种方法证明其身份",
        "content": "1. 实物认证：用实体所拥有的某个东西来认证\n2. 密码认证\n3. 生物特征认证：如指纹, 声音, 头像等\n4. 位置认证：根据实体所在的位置进行认证",
        "times": 0
    },
    {
        "category": 2,
        "title": "数字签名的功能和作用是什么",
        "content": "数字签名主要有以下几点作用\n1. 防止信息篡改：发送者使用私钥对数据进行加密, 接受者用公钥对数据进行解密, 可以验证数据的完整性\n2. 确认发送者身份：因为每个人的私钥是只有他本人拥有的, 所以他加密过的数据理论上也是只能由他本人加密的, 这样就可以确认发送者的身份\n3. 实现不可否认性：因为只有发送者本人才能拥有私钥, 加密数据, 所以发送者不能否认曾经发送过的信息",
        "times": 0
    },
    {
        "category": 2,
        "title": "网络防病毒工具的防御能力应该体现在哪些地方",
        "content": "1. 病毒检测能力\n2. 实时保护能力\n3. 病毒查杀能力\n4. 资源占用小\n5. 方便使用",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是PKI，由哪几个部分组成",
        "content": "PKI是一种基于公钥密码学的安全体系结构, 用来实现数字证书的管理和应用。\n他的组成部分主要有：数字证书, 公钥密码技术, 公钥的安全策略等",
        "times": 0
    },
    {
        "category": 2,
        "title": "认证中心有什么功能，由哪几个部分组成",
        "content": "认证中心的功能有证书发放, 证书更新, 证书撤销, 证书验证。认证中心的核心功能就是发放和管理数字证书。\n认证中心的主要组成有：注册服务器, 证书申请受理和审核机构, 认证中心服务器",
        "times": 0
    },
    {
        "category": 2,
        "title": "基于PKI的电子商务交易系统实现过程有哪几步",
        "content": "1. 首先客户浏览信息, 初始化请求, 客户端认证\n2. 然后验证客户身份, 确认客户购买权限, 返回应答请求, 用户进入购买状态\n3. 完成购物, 发送订单\n4. 服务器收到订单, 请求获取安全时间戳, 记录交易信息\n5. 想商家发送订单通知, 确认交易成功",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是数据包过滤技术",
        "content": "数据包过滤技术是网络安全中常用的一种安全机制, 通过系统设置的过滤的逻辑, 对数据包进行分析选择, 确定数据包能否通过网络。\n数据包过滤技术通常由防火墙实现, 有基于端口的过滤, 基于IP地址的过滤, 基于MAC地址的过滤等。",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是状态检测技术",
        "content": "状态检测技术是一种网络安全技术, 用来检测网络连接的状态, 已确认网络连接是否是属于合法的或是恶意的。",
        "times": 0
    },
    {
        "category": 2,
        "title": "防火墙体系结构通常分为哪几类",
        "content": "主要分为\n1. 屏蔽路由器\n2. 屏蔽主机网关\n3. 双宿主机网关\n4. 屏蔽子网",
        "times": 0
    },
    {
        "category": 2,
        "title": "OSI 安全体系中的五类相关安全服务: ",
        "content": "1. 认证(鉴别)服务:提供通信中对等实体和数据来源的认证(鉴别)。 \n2. 访问控制服务:用于防止未授权用户非法使用系统资源, 包括用户身份认证和用户权限确认\n3. 数据保密性服务:为防止网络各系统之间交换的数据被截获或被非法存取而泄密, 提供机密保护。同时,  对有可能通过观察信息流就能推导出信息的情况进行防范。 \n4. 数据完整性服务:用于防止非法实体对交换的数据的修改、插入、删除以及在数交换过程中的数据丢 失。 \n5. 抗否认性服务(也叫不可否认性服务):用于防止发送方在发送数据后否认发送, 接收方在接收到数据后否认收到或伪造数据的行为。",
        "times": 0
    },
    {
        "category": 2,
        "title": "网络攻击的类型有哪些",
        "content": "从安全属性来看主要有阻断攻击, 截取攻击, 篡改攻击, 伪造攻击\n1. 阻断攻击：使系统的资产被破坏, 无法提供用户使用\n2. 截取攻击：使非授权者得到资产的访问\n3. 篡改攻击：非授权者访问资产, 并且还修改信息\n4. 伪造攻击：非授权者在系统中插入伪造的信息\n从攻击方式来看主要有主动攻击和被动攻击\n1. 被动攻击：传输报文信息的泄露和通信流量分析\n2. 主动攻击：对数据流进行一些修改或者生成一些假的数据流",
        "times": 0
    },
    {
        "category": 2,
        "title": "网络信息的安全服务有哪些",
        "content": "1. 机密性服务：提供信息的保密\n2. 完整性服务：提供信息的正确性\n3. 可用性服务：提供的信息是可用的\n4. 可审性服务：进行身份的认证",
        "times": 0
    },
    {
        "category": 2,
        "title": "安全评估准则有哪些",
        "content": "1. TCSEC\n2. ITSEC\n3. CC\n4. 我国信息安全评估准则",
        "times": 0
    },
    {
        "category": 2,
        "title": "网络攻击的类型主要有哪些",
        "content": "主要有阻断攻击, 截取攻击, 篡改攻击, 伪造攻击 ",
        "times": 0
    },
    {
        "category": 2,
        "title": "风险评估工具有哪些",
        "content": "1. 调查问卷\n2. 检查列表\n3. 人员访谈\n4. 漏洞扫描器\n5. 渗透测试 ",
        "times": 0
    },
    {
        "category": 2,
        "title": "网卡一般有哪几种工作模式",
        "content": "一般有四种工作模式\n1. 广播模式\n2. 多播模式\n3. 直接模式\n4. 混杂模式",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是ARP协议",
        "content": "ARP协议就是地址解析技术, 是根据IP地址解析物理地址的一个TCP/IP协议。ARP协议的作用就是将网络层的IP地址转换成数据链路层的MAC地址, 以便数据在网络中的传播。具体的协议内容是：\n当A主机向B主机发送消息时, 先检查自己ARP缓存中有没有B主机的MAC地址, 如果没有的话, 广播一个ARP请求报文, 然后B主机收到ARP请求报文之后, 向A主机回复一个ARP应答报文, 其中包含B主机的MAC地址, 然后A主机就可以传送数据帧给B主机了。",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是ARP欺骗攻击",
        "content": "ARP欺骗攻击就是比如在一个交换式网络环境中, 有正常通信的A和B主机, 有攻击的主机C, 还有一个交换机S。C主机每隔一段时间就向A和B主机发送ARP应答包, 告诉他们A的IP地址对应的MAC地址是C的, B的IP地址对应的MAC地址是C的。然后A和B主机就会在ARP缓存中保存这个信息, 当A要发送数据给B的时候就会选择C的MAC地址发送",
        "times": 0
    },
    {
        "category": 2,
        "title": "ARP攻击技术有哪些",
        "content": "1. 发送发亮的虚假MAC地址数据报\n2. ARP欺骗攻击\n3. 修改本地MAC地址",
        "times": 0
    },
    {
        "category": 2,
        "title": "怎么样找到ARP攻击的病毒源",
        "content": "有三种方法\n1. 对网络中任意一台主机进行捕包分析, 如果发现有另一个主机一直在发送ARP请求包, 那么这就是病毒源\n2. 找两台不能上网的主机, 查看和他们通信的设备, 如果都有某个主机的话, 那这个主机就是病毒源\n3. 在已经中毒的主机上跟踪某个外网地址, 第一跳的地址往往就是病毒主机的地址",
        "times": 0
    },
    {
        "category": 2,
        "title": "如何防御ARP攻击",
        "content": "有下面几种方法\n1. 减少ARP缓存的更新间隔时间\n2. 建立静态的ARP表\n3. 禁止ARP",
        "times": 0
    },
    {
        "category": 2,
        "title": "有哪些典型的DoS攻击",
        "content": "1. Land攻击\n2. SYN洪水\n3. Smurf攻击\n4. HTTP洪水\n5. CC攻击",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是恶意代码",
        "content": "恶意代码是一种有害的计算机代码或web脚本, 目的是破坏计算机或网络资源的可用性、机密性和完整性。恶意代码包括病毒, 蠕虫, 木马等",
        "times": 0
    },
    {
        "category": 2,
        "title": "病毒和木马的区别",
        "content": "1. 病毒主要是依附在电脑某个程序上, 当运行这个程序时被激活运行, 然后进行大量的复制。而木马大多数本身就是一个程序, 只有当运行这个程序的时候木马才会运行\n2. 病毒的主要目的是破坏, 而木马的主要目的是获取用户隐私\n3. 病毒具有一定的传染性, 而传染性通常不是木马的主要目的",
        "times": 0
    },
    {
        "category": 2,
        "title": "病毒和蠕虫的区别",
        "content": "1. 病毒主要是依附在电脑某个程序上, 当运行这个程序时被激活运行, 然后进行大量的复制。而蠕虫大多数本身就是一个程序\n2. 蠕虫主要目的是为了影响整体网络性能和系统性能, 通常会通过网络从一台主机感染到其他的主机",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是DNS协议",
        "content": "DNS协议是一种应用层协议, 将用户提供的域名解析为响应的IP地址, 使用端口号53",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是DNS攻击",
        "content": "DNS攻击就是利用DNS协议中的弱点和漏洞进行攻击, 攻击者通过欺骗DNS服务器或者污染DNS缓存来重定向用户流量, 将用户重定向到恶意站点。",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是网络安全扫描",
        "content": "是对计算机系统进行相关的安全检测, 找出安全隐患和漏洞, 有效避免非法入侵。",
        "times": 0
    },
    {
        "category": 2,
        "title": "什么是PGP",
        "content": "PGP是一套用于信息加密, 验证的应用程序, PGP将纯文本更改为代码, 用来保护电子邮件, 数据文件, 驱动器和即时消息的隐私",
        "times": 0
    },
    {
        "category": 7,
        "title": "什么是计算机网络",
        "content": "计算机网络是将地理位置不同的具有独立功能的多台计算机通过通信线路链接起来, 实现资源的共享和信息的传递。计算机网络可以分为局域网, 城域网, 广域网等",
        "times": 0
    },
    {
        "category": 7,
        "title": "电路交换和分组交换是什么，他们有什么特点",
        "content": "电路交换和分组交换是不同的两种数据交换方式, 电路交换是在通信的全部时间里面, 两个用户始终占用点对点的通信资源。而分组交换不需要一直占用点对点的通信资源。电路交换的传输速度快, 但是线路利用率低。分组交换无需建立连接, 线路利用率高, 但是传输时延大",
        "times": 0
    },
    {
        "category": 7,
        "title": "有哪些衡量网络性能的指标",
        "content": "包括数据传输速率, 带宽, 时延, 吞吐量等",
        "times": 0
    },
    {
        "category": 7,
        "title": "计算机网络中为什么要划分层次",
        "content": "采用分层结构主要是为了将复杂的网络问题分解为一个个较小的, 界限清晰的简单部分来处理, 方便网络系统的设计和维护",
        "times": 0
    },
    {
        "category": 7,
        "title": "OSI参考模型由上至下分别是什么",
        "content": "分别是应用层, 表示层, 会话层, 传输层, 网络层, 数据链路层, 物理层",
        "times": 0
    },
    {
        "category": 7,
        "title": "TCP/IP模型从上到下分别是什么",
        "content": "分别是应用层, 传输层, 网际层, 主机接口层",
        "times": 0
    },
    {
        "category": 7,
        "title": "计算机网络应用层中有哪些体系结构",
        "content": "有C/S结构, 也就是客户端, 服务器结构和P2P结构, 也就是端对端结构",
        "times": 0
    },
    {
        "category": 7,
        "title": "有哪些应用采用C/S模型",
        "content": "有WWW, email, DNS, FTP等",
        "times": 0
    },
    {
        "category": 7,
        "title": " 有哪些应用采用P2P结构",
        "content": "有BT, Sync等",
        "times": 0
    },
    {
        "category": 7,
        "title": "什么是Sockets",
        "content": "Sockets是套接字, 是计算机之间进行通信的一种约定或者一种方法。通信中, 两台计算机软件的互通式通过一组套接字的通信端点来完成的",
        "times": 0
    },
    {
        "category": 7,
        "title": "举出几种常用服务的端口号",
        "content": "1. DNS：53\n2. HTTP：80\n3. FTP：21\n4. SSH：22\n5. HTTPS：443",
        "times": 0
    },
    {
        "category": 7,
        "title": "TCP服务和UDP服务各有什么特点",
        "content": "TCP服务是面向连接的服务, 可靠性高, 传输速度慢, 适用于对网络可靠性比较高的通信比如说访问网页, 传输文件等。\nUDP服务是无连接的服务, 可靠性低, 传输速度快, 适用于对网络可靠性比较低的通信, 比如说视频通话等",
        "times": 0
    },
    {
        "category": 7,
        "title": "举出几个顶级域名的例子",
        "content": "有com, cn, jp, org, net, edu, gov等",
        "times": 0
    },
    {
        "category": 7,
        "title": "什么是HTTP协议",
        "content": "HTTP协议是一个应用层协议, 是一种用来传输超文本信息的协议, 通常采用C/S模型来进行消息的传输, 传输层采用TCP协议, 端口号为80。",
        "times": 0
    },
    {
        "category": 7,
        "title": "有哪些常见的HTTP请求",
        "content": "有GET请求, POST请求, PUT请求, HEAD请求等",
        "times": 0
    },
    {
        "category": 7,
        "title": " 什么是代理服务器",
        "content": "代理服务器是一种网络服务器, 充当客户端和其他服务器之间的中介。代理服务器接受客户端的请求, 然后转发给其他服务器, 并且给客户端返回相应的响应",
        "times": 0
    },
    {
        "category": 7,
        "title": "简述一个人给另一个人发邮件的过程",
        "content": "首先发件人A编写好邮件, 通过SMTP协议将邮件发送给A的邮件服务器, 然后A的邮件服务器通过SMTP协议将邮件发送给收件人B的邮件服务器, 最后B使用POP3协议将邮件从B的邮件服务器中下载下来",
        "times": 0
    },
    {
        "category": 7,
        "title": "什么是SSL",
        "content": "SSL是一种安全协议, 用在客户端和服务端之间建立加密的连接, 通常用来web浏览器和web服务器之间安全的交换信息。现在通常使用TSL。",
        "times": 0
    },
    {
        "category": 7,
        "title": "有哪些可靠的数据传输协议，分别有哪些特性",
        "content": "1. 停止等待协议：发送方一次只发送一个数据包, 数据包中有检验信息, 传输到接收方之后如果无误回复ACK, 发送方使用定时器来解决包丢失的情况。\n2. 后退N帧协议：发送窗口为一个定值, 接收窗口为1, 流水线的发送发送窗口的信息, 然后接收方返回ACK, 如果出错的话, 回退到出错的帧。\n3. 选择重传协议：发送窗口和接收窗口都是一个固定的数, 每次只需要重传出错的数据包",
        "times": 0
    },
    {
        "category": 7,
        "title": "举出使用TCP协议传输的服务",
        "content": "有HTTP服务, FTP服务, SSH服务, POP3服务等",
        "times": 0
    },
    {
        "category": 7,
        "title": "举出使用UDP协议传输的服务",
        "content": "有DNS服务, 路由表更新等",
        "times": 0
    },
    {
        "category": 7,
        "title": "介绍TCP连接的过程",
        "content": "A主机向B主机请求建立TCP连接, 首先发送一个TCP报文, 其中指定序列号, SYN为1。\n之后B主机收到报文, 返回一个TCP报文, 其中ACK为1, SYN为1, \nA主机收到返回的报文, 再次发送TCP报文, 其中ACK为1, 报文中可能含有传输的数据, 到此, 连接确立。\n之后经过一段时间的数据传递, A已经没有数据要传递给B了, A向B发送释放连接请求。\n首先A向B发送一个TCP报文, 其中FIN为1, ACK为1\n然后B收到报文, 回复一个TCP报文, 其中ACK为1\n之后B仍然可以向A传输数据\n当B的数据也传输结束后, B向A发送TCP报文, 其中FIN为1, ACK为1\n之后A收到释放报文, 回复一个TCP报文, 其中ACK为1, 经过一段时间之后关闭连接\nB收到A的释放报文之后关闭连接",
        "times": 0
    },
    {
        "category": 7,
        "title": "说出计算机网络中的几个互联的设备，他们工作在哪些层次",
        "content": "1. 中继器, 集线器：工作在物理层\n2. 网桥, 交换机：工作在数据链路层\n3. 路由器：工作在网络层",
        "times": 0
    },
    {
        "category": 7,
        "title": "虚电路网络和数据报网络各有什么特点",
        "content": "虚电路网络提供面向连接服务, 在发送数据之前首先将源主机和目的主机之间建立一条需连接, 然后传输数据\n数据报网络是提供无连接服务, 将数据分成一个个的数据包然后传输, 其中每个数据包中含有原地址和目的地址的信息, 沿着不同的路径传送",
        "times": 0
    },
    {
        "category": 7,
        "title": "网络层中有哪些协议，分别是用来做什么的",
        "content": "1. IP协议：IP协议是TCP/IP协议的核心, 用来使互联的网络能够相互通信\n2. ICMP协议：用来负责网络中数据包的传输\n3. IGMP协议：用于多播组管理",
        "times": 0
    },
    {
        "category": 7,
        "title": "什么是NAT呢",
        "content": "NAT是一种地址转换技术, 可以将IP数据报文头中的IP地址转换为另一个IP地址, 并通过转换端口号达到地址复用的目的, 是为了解决IPv4短缺而开发的技术",
        "times": 0
    },
    {
        "category": 7,
        "title": "什么是DHCP",
        "content": "DHCP是动态分配IP地址的一个协议",
        "times": 0
    },
    {
        "category": 7,
        "title": "什么是ICMP协议",
        "content": "ICMP协议是因特网中差错处理的一个协议",
        "times": 0
    },
    {
        "category": 7,
        "title": "网络层中有哪些路由选择协议",
        "content": "1. 有内部网关协议和外部网关协议\n2. 内部网关协议中使用的最多的协议有RIP协议和OSPF协议\n3. 外部网关中有BGP协议",
        "times": 0
    },
    {
        "category": 7,
        "title": "简述一下数据在网络中传输的过程",
        "content": "首先A主机的一个应用要向B主机的一个应用发送数据, 首先将数据传输到传输层, 分割为报文段, 然后报文段将数据传输到网络层, 封装成数据包并添加源和目的IP地址, 介质传输到数据链路层, 数据链路层封装成帧, 并添加源和目的MAC地址, 最后传输给物理层, 通过物理介质传输",
        "times": 0
    },
    {
        "category": 7,
        "title": "数据链路层中有哪些协议",
        "content": "有HDLC协议, PPP协议等",
        "times": 0
    },
    {
        "category": 7,
        "title": "计算机网络的主要功能有哪些",
        "content": "计算机网络的主要功能有硬件资源共享，软件资源分享，用户间的信息交换，分布式处理数据等",
        "times": 0
    },
    {
        "category": 7,
        "title": "计算机网络提供的服务的三种分类",
        "content": "主要有面向连接的服务和无连接的服务, 区分点是两个主机进行通信, 是否要实现建立连接\n可靠服务和不可靠服务, 区分点是网络是否有纠错检错的能力, 数据能否可靠的传输到目的地\n有应答和无应答的服务, 区分点是接收方在接受到数据之后是否要给出相应的应答",
        "times": 0
    },
    {
        "category": 7,
        "title": "如何理解同步和异步，什么是同步通信和异步通信",
        "content": "同步和异步表示的是通信双方的数据传输方式, 同步通信要求接收端始终频率和发送端始终频率一样, 必须要连续的按照时钟发送比特流。异步通信指的是发送端和接收端的时钟不需要保持同步, 发送端发送数据后, 可以通过任意长时间再发送数据, 但是这时候首部和尾部必须要做",
        "times": 0
    },
    {
        "category": 7,
        "title": "频分复用，时分复用，波分复用，码分复用分别是什么",
        "content": "1. 频分复用就是将一个物理信道划分为多个逻辑信道, 各个逻辑信道占用不同的频带\n2. 时分复用就是按照时间划分为不同的信道\n3. 波分复用就是将不同波长的光同时传输到一根光纤上\n4. 马粪复用是将多个用户数据流通过不同码型编码后再叠加到载波上传输",
        "times": 0
    },
    {
        "category": 7,
        "title": "为什么要进行流量控制",
        "content": "因为收发双方工作速率和缓存空间都存在差异, 可能会出现发送方的发送能力大于接收方的接收能力的情况, 如果不进行流量控制, 之前的数据就可能被之后的数据淹没, 造成帧的丢失。",
        "times": 0
    },
    {
        "category": 7,
        "title": "有哪些可靠的传输机制",
        "content": "可靠的传输机制有确定机制和超时重传机制。确定机制可以保证每一个帧接收者都可以收到, 超时重传机制可以防止在传输过程中帧的丢失",
        "times": 0
    },
    {
        "category": 7,
        "title": "中继器，集线器，网桥和交换机这四种网络互联设备有什么区别和联系",
        "content": "中继器是一种物理层设备, 可以将多个信号从一个网段传输到另一个网段, 防止信号衰弱。集线器也是一种物理层设备, 可以将多个计算机连接起来组成局域网。网桥是一种数据链路层设备, 可以连接多个局域网, 分割冲突域, 交换机也是一种数据链路层, 相当于多接口的网桥, 同样可以连接多个局域网, 分割冲突域",
        "times": 0
    },
    {
        "category": 7,
        "title": "路由器的主要功能是什么",
        "content": "路由器的主要功能有路由选择和分组转发。前者根据特定的路由选择协议构造路由表, 同时定期根据拓扑结构更新路由表的信息。后者根据通过路由器的数据的目的地址, 将数据从正确的端口转发出去。",
        "times": 0
    },
    {
        "category": 7,
        "title": "介绍一下你知道的动态路由算法",
        "content": "有RIP算法和OSPF算法\n1. RIP算法：所有结点定期的将路由选择表传送给相邻的结点, 路由表包括每条路径的目的地和路径的代价, 然后进行路由选择表的更新。数据的传输就根据路由选择表中的代价来进行转发。\n2. OSPF算法：每个结点都拥有完整的网络拓扑信息, 然后定期根据网络拓扑结构的变化更新结点的信息。当数据传输是根据迪杰斯特拉算法计算出最短路径信息, 然后进行路由转发。",
        "times": 0
    },
    {
        "category": 7,
        "title": "网络层转发分组的流程是什么",
        "content": "1. 路由器从数据报的首部中提取到目的主机的IP地址, 得到目的主机的网络地址\n2. 如果目的主机的网络地址就是该路由器所在的地址, 直接将数据报传输给目的主机, 叫做直接交付, 否则间接交付\n3. 如果目的主机的网络地址不是该路由所在地址, 就按照路由传输算法将数据报传给下一跳的路由器, 直到传输给目标网络地址的路由器。\n4. 目标地址的路由器根据目的IP地址将数据传输给目标主机, 如果目标主机不存在的话, 返回转发分组错误",
        "times": 0
    },
    {
        "category": 7,
        "title": "ICMP网际控制报文协议有哪些类型",
        "content": "共有五大类型, 分别是\n1. 终点不可达\n2. 原点抑制\n3. 时间超过\n4. 参数问题\n5. 改变路由",
        "times": 0
    },
    {
        "category": 7,
        "title": "传输层的功能有哪些",
        "content": "1. 传输层向上面的应用层提供通信服务, 为运行在不同主机上的进程提供了逻辑通信\n2. 传输层对收到的报文要进行差错检测, 防止数据出错\n3. 提供TCP协议和UDP协议进行数据的传输",
        "times": 0
    },
    {
        "category": 7,
        "title": "拥塞控制的算法有哪些",
        "content": "1. 首先刚开始TCP连接之后拥塞窗口是1, 之后没收到一个确认, 拥塞窗口+1, 即每经过一个传输轮次, 拥塞窗口指数型增长。到达慢开始门限值后, 改用拥塞避免算法\n2. 每经过一个传输轮次, 拥塞窗口+1, 直到发生拥塞\n3. 发生拥塞之后, 慢开始门限值改为发生拥塞时的窗口数的一半, 拥塞窗口变为1, 并继续从慢开始开始",
        "times": 0
    }
]